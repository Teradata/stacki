#!/bin/sh
#
# @copyright@
# Copyright (c) 2006 - 2019 Teradata
# All rights reserved. Stacki(r) v5.x stacki.com
# https://github.com/Teradata/stacki/blob/master/LICENSE.txt
# @copyright@
#
#=============================================
# do the voodoo that we do
#---------------------------------------------

unset PYTHONPATH
export LD_LIBRARY_PATH=/opt/stack/lib

/opt/stack/bin/stacki-profile.py

#
# stacki-profile.py outputs the file /tmp/stacki-profile.xml which contains
# two "chapters":
#
#	1) "yast" chapter. This is the autoinst.xml file.
# 	2) "stacki" chapter. This is python code that will be imported into
#		other programs that run during the install in order to
#		configure the system.
#

cat /tmp/stacki-profile.xml \
	| /opt/stack/bin/stack list host profile chapter=main \
	> /tmp/profile/autoinst.xml

mkdir -p /tmp/stack_site/

cat /tmp/stacki-profile.xml \
	| /opt/stack/bin/stack list host profile chapter=stacki \
	> /tmp/stack_site/__init__.py

# Setup SSH config
/opt/stack/bin/gen_ssh_config.py

# Start ssh server on port 2200
/usr/sbin/sshd -p 2200 -o AuthorizedKeysFile=/authorized_keys

# add stack.conf and start ludicrous

FRONTEND=$(PYTHONPATH=/tmp /opt/stack/bin/python3 -c "from stack_site import *; print(attributes['Kickstart_PrivateAddress']);")
YUMSERVER=$(PYTHONPATH=/tmp /opt/stack/bin/python3 -c "exec(\"from stack_site import *\\nif 'yumserver' in attributes: print(attributes['yumserver'])\")")

/opt/stack/bin/smq-publish -chealth -t300 '{"state": "install profile"}'

echo "tracker = ${FRONTEND}:3825" > /tmp/stack.conf

/opt/stack/bin/python3 -E /opt/stack/bin/ludicrous-client.py --environment initrd --trackerfile='/tmp/stack.conf';

# nuke the disks, if appropriate
/opt/stack/bin/initialize-storage.py

#
# configure the hardware disk array controller first
#
/opt/stack/bin/configure-controllers.py
if [ $? -ne 0 ]
then
	touch /tmp/wait
	echo "Unable to complete storage controller configuration."
	while [ -f /tmp/wait ]
	do
		sleep 1
		/opt/stack/bin/smq-publish -chealth '{"state": "controller config failed - check console or reinstall with halt_install_on_error=False"}'
	done
fi


udevadm settle --timeout=60

# NOTE: we initialize storage twice in RHEL, so do the same thing here, too

# need to call 'initialize-storage.py' again after reconfiguring the
# hardware disk controller because it may have created new LUNs and the
# master boot record on a LUN may be corrupted and require initialization.

/opt/stack/bin/initialize-storage.py

#
# then configure the partitions
#
/opt/stack/bin/output-partition.py > /tmp/partition.xml

# Configure the bootloader
/opt/stack/bin/output-bootloader.py > /tmp/bootloader.xml

# give ourselves the ability to hold the installation prior to the start of yast
#
grep stack-debug /proc/cmdline 2>&1 > /dev/null
if [ $? -eq 0 ]
then
	touch /tmp/wait
	echo "Stacki debug wait loop - remove /tmp/wait to continue"
	while [ -f /tmp/wait ]
	do
		sleep 1
		/opt/stack/bin/smq-publish -chealth '{"state": "install wait"}'
	done
fi

if [[ -n $YUMSERVER ]]
then
	sed -i 's/'"$FRONTEND"'/'"$YUMSERVER"'/' /etc/install.inf
else
	sed -i 's/'"$FRONTEND"'/'"127.0.0.1"'/' /etc/install.inf
fi

#
# execute code that runs just prior to the autoyast gui 
#
PYTHONPATH=/tmp /opt/stack/bin/python3 -c "exec(\"from stack_site import *\\ntry: \\n patch() \\nexcept: \\n pass\" )"

