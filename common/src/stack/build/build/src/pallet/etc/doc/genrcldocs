#!/opt/stack/bin/python3
#
# @rocks@
# Copyright (c) 2000 - 2010 The Regents of the University of California
# All rights reserved. Rocks(r) v5.4 www.rocksclusters.org
# https://github.com/Teradata/stacki/blob/master/LICENSE-ROCKS.txt
# @rocks@

import os
import sys
import string
import stack.api
	

def markdown():
	try:
		os.mkdir('cli')
	except OSError:
		pass
	cli_toc = {}
	# Generate documentation from each command
	for line in list:
		verb = line.split()[0]
		cmd = 'stack %s help format=md' % line
		f = '-'.join(line.split()) + '.md'
		try:
			os.mkdir('cli/%s' % verb)
		except OSError:
			pass
		cmdline = '%s > cli/%s/%s' % (cmd, verb, f)
		print("Running %s" % cmdline)
		os.system(cmdline)

		# Keep a list of the verbs to
		# generate a TOC
		if not verb in cli_toc:
			cli_toc[verb] = []
		cli_toc[verb].append(line.split()[1:])


	# Generate Global / Comprehensive TOC File
	cli_toc_file = open('cli/%s-CLI-documentation.md' % roll,'w')
	cli_toc_file.write("### %s Command Line Interface Reference\n\n" % roll)

	# Main Page Sidebar
	cli_sidebar = open('cli/_Sidebar.md','w')
	cli_sidebar.write("### %s CLI\n\n" % roll)
	cli_sidebar.write('[Home](Home)\n\n')
	cli_sidebar.write('[Command Line Interface](%s-CLI-documentation)\n\n' % roll)

	# Get a list of verbs
	verbs = sorted(cli_toc.keys())
	for verb in verbs:
		# Verb-specific TOC files named <verb>-commands.md. 

		# Write each verb to the Global TOC and the main page
		cli_toc_file.write('* [%s](%s-%s-commands)\n' % (verb, roll, verb))
		# Connect the verb TOC file to the Main Sidebar
		cli_sidebar.write('* [%s](%s-%s-commands)\n' % (verb, roll, verb))

		# Create the verb TOC file
		print("Writing verbfile cli/%s/%s-%s-commands.md" % (verb, roll, verb))
		verbfile = open('cli/%s/%s-%s-commands.md' % (verb, roll, verb), 'w')
		# Title of verb TOC
		verbfile.write("# %s commands\n\n" % verb)

		# Verb specific Sidebar
		verb_sidebar = open('cli/%s/_Sidebar.md' % (verb), 'w')

		# Main Page Link
		verb_sidebar.write('[Home](Home)\n\n')
		verb_sidebar.write('[Command Line Interface](%s-CLI-documentation)\n\n' % roll)

		# Get the current verb we're processing
		i = verbs.index(verb)

		# Add all the verbs before the current one to the sidebar
		non_exp_verbs = verbs[:i]
		for n in non_exp_verbs:
			verb_sidebar.write("* [%s](%s-%s-commands)\n"% (n, roll, n))

		# Current verb and its dependents in the sidebar
		verb_sidebar.write("* [%s](%s-%s-commands)\n" % (verb, roll, verb))
		for cli in cli_toc[verb]:
			# Get command name
			cmd = '%s %s' % (verb, ' '.join(cli).strip())
			# Get link
			if len(cli) > 0:
				lnk = '%s-%s' % (verb, '-'.join(cli).strip())
			else:
				lnk = '%s' % verb
			# Write the command to the Main TOC file
			cli_toc_file.write('  * [%s](%s)\n' % (cmd, lnk))
			# Write command to Verb TOC file
			verbfile.write('  * [%s](%s)\n' % (cmd, lnk))
			# Write command to Verb Sidebar
			verb_sidebar.write('  * [%s](%s)\n' % (cmd, lnk))

		# Add all verbs after the current verb in the sidebar
		non_exp_verbs = verbs[i+1:]
		for n in non_exp_verbs:
			verb_sidebar.write("* [%s](%s-%s-commands)\n"% (n, roll, n))
		verbfile.close()
		verb_sidebar.close()

	cli_toc_file.close()
		

def getCommands(roll=None):
	list	 = []
	if roll:
		for cmd in stack.api.Call('list pallet command',[roll]):
			list.append(cmd['command'])
	return list

roll     = sys.argv[1]
if roll == 'None':
	roll = None

list = getCommands(roll)

if len(sys.argv) > 2:
	fmt 	 = sys.argv[2]

import __main__
f = getattr(__main__, fmt)

f()

