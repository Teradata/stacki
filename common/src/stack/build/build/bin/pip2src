#! /opt/stack/bin/python3
# -*- python -*-
#
# @copyright@
# Copyright (c) 2006 - 2018 Teradata
# All rights reserved. Stacki(r) v5.x stacki.com
# https://github.com/Teradata/stacki/blob/master/LICENSE.txt
# @copyright@

import os
import json
import subprocess
import tempfile


class Package:

	def __init__(self, name, *, master=False):
		self.name         = name
		self.master       = master
		self.bootstrap    = False
		self.version      = ''
		self.license      = ''
		self.url          = ''
		self.appliances   = [ ]
		self.dependencies = [ ]


class Scanner:

	def __init__(self, root):
		self.root     = root
		self.metadata = []
		self.packages = []
		self.traverse(root)

	def traverse(self, root):
		for x in os.listdir(root):
			path = os.path.join(root, x)
			tokens = x.rsplit('.', 1)
			if len(tokens) == 2:
				if tokens[1] == 'dist-info':
					self.readWheel(path)
					continue
				if tokens[1] == 'egg-info':
					self.readEgg(path)
					continue
			if os.path.isdir(path):
				self.traverse(path)

	def readWheel(self, path):
		print('\tfound whl %s' % os.path.split(path)[-1])
		try:
			# Try the normal metadata file first
			with open(os.path.join(path, 'metadata.json'), 'r') as text:
				meta = json.load(text)
			print('\t\tmetadata.json')
		except FileNotFoundError:
			# If the normal file doesn't exist, try the old version
			meta = {}
			with open(os.path.join(path, 'METADATA'), 'r') as text:
				print('\t\tMETADATA')
				for line in text:
					try:
						key, value = line.split(':', 1)
					except ValueError:
						continue
					key   = key.strip().lower()
					value = value.strip()
					if key in [ 'name', 'version' ]:
						meta[key] = value
					elif key == 'home-page':
						meta['url'] = value
					elif key == 'license':
						meta['license'] = value.strip()
					elif key == 'classifier' and value.startswith('License'):
						_, value = value.split('::', 1)
						meta['license'] = value.strip()

		try:
			meta['url'] = meta['extensions']['python.details']['project_urls']['Home']
		except:
			pass

		if 'classifiers' in meta:
			for c in meta['classifiers']:
				k, v = c.split('::', 1)
				if k.strip() == 'License':
					meta['license'] = v.strip()

		print(f'\t\t{meta}')
		package = Package(meta['name'])
		package.version = meta['version']
		package.license = meta['license']
		package.url     = meta['url']
		self.packages.append(package)


	def readEgg(self, path):
		print('\tfound egg %s' % os.path.split(path)[-1])
#		os.system('cat %s' % os.path.join(path, 'PKG-INFO'))
		meta = {}
		with open(os.path.join(path, 'PKG-INFO'), 'r', encoding='utf-8') as text:
			for line in text:
				try:
					key, value = line.split(':', 1)
				except ValueError:
					continue
				key   = key.strip().lower()
				value = value.strip()
				if key in [ 'name', 'version' ]:
					meta[key] = value
				elif key == 'home-page':
					meta['url'] = value
				elif key == 'license':
					meta['license'] = value.strip()
				elif key == 'classifier' and value.startswith('License'):
					_, value = value.split('::', 1)
					meta['license'] = value.strip()

		print(f'\t\t{meta}')
		package = Package(meta['name'])
		package.version = meta['version']
		package.license = meta['license']
		package.url     = meta['url']
		self.packages.append(package)
		


Prefix = 'foundation-python'

# Build the PackageSet

PackageSet = {}
with open('packages.json', 'r') as text:
	code = []
	for line in text: # json doesn't allow comments (we do)
		if not line.startswith('//'):
			code.append(line)
	manifest = json.loads(''.join(code))
	for name in manifest:
		package = Package(name, master=True)
		package.bootstrap = manifest[name].get('bootstrap')
		package.version   = manifest[name].get('version')
		if manifest[name].get('fe'):
			package.appliances.append('server')
		if manifest[name].get('be'):
			package.appliances.append('client')
		PackageSet[name] = package


# If we have versions.json file populate any missing version with the previously
# computed values.

if os.path.exists('versions.json'):
	with open('versions.json', 'r') as text:
		versions = json.loads(text.read())
	for package in PackageSet.values():
		if not package.version:
			package.version = versions[package.name]

# Compute dependencies and versions
#
# There's no PIP interface for this so for each master package (above) install
# it into a tmp directory and then go find the metadata.json files to figure
# out what got installed. Yes this means we build things twice when all
# packages get refreshed.

pkgnames = sorted(PackageSet.keys())
for pkgname in pkgnames:
	with tempfile.TemporaryDirectory() as tmp:
		version = PackageSet[pkgname].version
		if version:
			target = '%s==%s' % (pkgname, version)
		else:
			target = pkgname
		print('Unpacking %s' % target)
		subprocess.run(['/opt/stack/bin/python3', '-mpip', 
				 'install', '-I', '--root=%s' % tmp, target],
			       stdout=subprocess.PIPE)
		print('Scanning  %s' % pkgname)
		for package in Scanner(tmp).packages:
			if package.name == pkgname:
				PackageSet[pkgname].version = package.version
				PackageSet[pkgname].url     = package.url
				PackageSet[pkgname].license = package.license
			else:
				package.bootstrap = PackageSet[pkgname].bootstrap
				PackageSet[pkgname].dependencies.append(package)
				PackageSet[package.name] = package
#		print(tmp)
#		import time
#		while True:
#			time.sleep(10)
				

# Write out the computed version

version = {} # just the master packages
nosat   = {} # all the packages (help us audit 3rd party crap)
for package in PackageSet.values():
	if package.master:
		version[package.name] = package.version
	nosat[package.name] = package
		
with open('versions.json', 'w') as text:
	text.write(json.dumps(version))

rows   = []
widths = [ 0, 0, 0, 0 ]
for name in sorted(nosat.keys()):
	rows.append([name, nosat[name].version, nosat[name].url, nosat[name].license])
for row in rows:
	for i in range(0, 4):
		if len(row[i]) > widths[i]:
			widths[i] = len(row[i])
		
with open('nosat.txt', 'w') as text:
	for row in rows:
		text.write(f'{row[0].ljust(widths[0])} {row[1].ljust(widths[1])} {row[2].ljust(widths[2])} {row[3]}\n')

# Build the src/ directories

for package in PackageSet.values():
	srcdir = os.path.join('src', package.name)
	if os.path.exists(srcdir):
		continue # don't overwrite existing stuff
	os.makedirs(srcdir)

	with open(os.path.join(srcdir, 'Makefile'), 'w') as makefile:
		makefile.write("""
PKGROOT  = /opt/stack
ROLLROOT = %s/../..

include $(STACKBUILD)/etc/CCRules.mk

build:

install::
	$(PY.PATH) -mpip install -I --no-deps --root=$(ROOT) %s==$(VERSION)
""" % (os.environ['ROLLROOT'], package.name))
		if package.bootstrap:
			makefile.write('\nbootstrap: install-rpm\n')

	with open(os.path.join(srcdir, 'version.mk'), 'w') as ver:
		ver.write('NAME=%s-%s\n' % (Prefix, package.name))
		ver.write('VERSION=%s\n' % package.version)


# Create graph and node files

xmldir = os.path.join('nodes')
if not os.path.exists(xmldir):
	os.makedirs(xmldir)
for pkgname in pkgnames:
	with open(os.path.join(xmldir, '%s-pip2src-%s.xml' % (Prefix, pkgname)), 'w') as node:
		node.write('<stack:stack><stack:package>\n')
		node.write('%s-%s\n' % (Prefix, pkgname))
		for dep in PackageSet[pkgname].dependencies:
			node.write('\t%s-%s\n' % (Prefix, dep.name))
		node.write('</stack:package></stack:stack>')

xmldir = os.path.join('graph')
if not os.path.exists(xmldir):
	os.makedirs(xmldir)
with open(os.path.join(xmldir, '%s-pip2src.xml' % Prefix), 'w') as graph:
	graph.write('<graph>\n')
	for pkgname in pkgnames:
		for appliance in PackageSet[pkgname].appliances:
			graph.write('\t<edge from="%s-%s" to="%s-pip2src-%s"/>\n' % (Prefix, appliance, Prefix, pkgname))
		if PackageSet[pkgname].appliances:
			graph.write('\n')
	graph.write('</graph>')
		

# Create manifests

manifestdir = os.path.join('manifest.d')
if not os.path.exists(manifestdir):
	os.makedirs(manifestdir)
for pkgname in pkgnames:
	with open(os.path.join(manifestdir, '%s-%s.manifest' % (Prefix, pkgname)), 'w') as manifest:
		manifest.write('%s-%s\n' % (Prefix, pkgname))
		for dep in PackageSet[pkgname].dependencies:
			manifest.write('\t%s-%s\n' % (Prefix, dep.name))


