# @copyright@
# Copyright (c) 2006 - 2018 Teradata
# All rights reserved. Stacki(r) v5.x stacki.com
# https://github.com/Teradata/stacki/blob/master/LICENSE.txt
# @copyright@


import stack.commands

class Implementation(stack.commands.Implementation):
	def tournament(self, hosts, subnet):
		if len(hosts) % 2:
			hosts.append('bye')

		rounds = []

		for i in range(0, len(hosts) - 1):
			if i == 0:
				h = hosts[0:len(hosts)/2]
				a = hosts[len(hosts)/2:]
			else:
				h = [home[0]]
				h.append(away[0])
				for j in range(1,len(home) - 1):
					h.append(home[j])

				a = []
				for j in range(1,len(away)):
					a.append(away[j])
				a.append(home[-1])

			home = h
			away = a

			homehosts = []
			awayhosts = []
			for i in range(0, len(home)):
				if home[i] == 'bye' or away[i] == 'bye':
					#
					# skip the 'bye' games
					#
					continue

				homehosts.append(home[i])

				#
				# only the "away" hosts need to be translated
				# into the correct network name
				#
				awayhosts.append(self.owner.db.getHostname(
					away[i], subnet))

			rounds.append((homehosts, awayhosts))

		return rounds

	def run(self, args):
		hosts, subnet = args

		self.owner.fields = [ "host", "to", "mbits/sec" ]

#		s = salt.client.LocalClient()
		s = stack.client.LocalClient()
		if not subnet:
			subnet = 'private'

		#
		# first, start iperf on all nodes
		#
		res = self.call('run.host', [hosts, 'command="systemctl start iperf3"'])
		print(res)
#		s.cmd(hosts, "service.start", [ "iperf" ], expr_form = 'list')

		file = open('/tmp/nettest.debug', 'w')
		for home, away in self.tournament(hosts, subnet):
			file.write('home %s\n' % home)
			file.write('away %s\n' % away)
#			out = s.cmd(home, "iperf.run",
#				[ home, away ], timeout=20,
#				expr_form="list")
			self.call('run.host', ['iperf3 -J -A -f M -t 100 -c %s ' % away])
			file.write('%s\n' % out)

			for host in out:
				if type(out) != type({}) or not \
					out.has_key(host) or \
					type(out[host]) != type({}) or not \
					out[host].has_key('away') or not \
					out[host].has_key('sent') or not \
					out[host].has_key('recv'):

					continue


				tohost = out[host]['away']
				fromhost = self.owner.db.getHostname(host,
					subnet)

				if subnet == 'private':
					# 
					# just output the short name, that is,
					# don't append the private domain
					# (e.g., ".local")
					# 
					tohost = self.owner.db.getHostname(
						tohost)
					fromhost = self.owner.db.getHostname(
						fromhost)

				sent = float(out[host]['sent']) / (1000 * 1000)
				recv = float(out[host]['recv']) / (1000 * 1000)

				self.owner.addOutput(fromhost, (tohost,
					'%.2f' % sent))
				self.owner.addOutput(tohost, (fromhost,
					'%.2f' % recv))

		file.close()

		#
		# stop iperf
		#
#		s.cmd(hosts, "service.stop", [ "iperf" ], expr_form = 'list')

		self.call('run.host', [hosts, 'command="systemctl stop iperf3"'])
