<stack:stack>

	<stack:copyright>
	Copyright (c) 2006 - 2019 Teradata
	All rights reserved. Stacki(r) v5.x stacki.com
	https://github.com/Teradata/stacki/blob/master/LICENSE.txt
	</stack:copyright>

        <stack:rocks>
        Copyright (c) 2000 - 2010 The Regents of the University of California
        All rights reserved. Rocks(r) v5.4 www.rocksclusters.org
        https://github.com/Teradata/stacki/blob/master/LICENSE-ROCKS.txt
        </stack:rocks>

	<stack:package>mariadb</stack:package>
	<stack:package stack:cond="os == 'redhat'">mariadb-server</stack:package>


<stack:script stack:stage="install-post">


<!--
	The goal of this file is to get the distribution's stock
	MariaDB installation to a known common state with as little
	customization and reliance on a distro's packaged helper scripts
	as possible.

	Distro's seem to agree to put the mysql data files in /var/lib/mysql
	But the socketfile dir varies, so we force it into /var/run/mysql

	To make this possible, we start mysql in a controlled mode,
	get the initial config right, then shut it back down and hand it over
	to systemd
-->


<!--
	set the hostname to the private name. this helps the stacki command
	line find the host 'localhost' correctly
-->
/bin/hostname &hostname;

<stack:file stack:name="/etc/hostname" stack:cond="os == 'sles'">
&Info_FQDN;
</stack:file>

<!-- Generate random password for root access to the database -->
root_pw=`/opt/stack/sbin/gen_random_pw`
<stack:file stack:name="/etc/root.my.cnf" stack:perms="0400"
	    stack:owner="root:root" stack:vars="expanded">
[client]
user		= root
socket		= /var/run/mysql/mysql.sock
password	= $root_pw
</stack:file>

<!-- symlink to root's home dir -->
ln -s --force /etc/root.my.cnf /root/.my.cnf

<!-- Generate random password for apache access to database -->
apache_pw=`/opt/stack/sbin/gen_random_pw`
<stack:file stack:name="/etc/apache.my.cnf"
	    stack:owner="root:apache" stack:perms="0640" stack:vars="expanded">
[client]
user		= apache
socket		= /var/run/mysql/mysql.sock
password	= $apache_pw
</stack:file>

<!-- this is the config file mysql tools look at by default -->
<stack:file stack:name="/etc/my.cnf"
	    stack:owner="root:mysql" stack:perms="0640">
[mysqld]
user		= mysql
socket		= /var/run/mysql/mysql.sock
max_allowed_packet = 1024M

[client]
socket		= /var/run/mysql/mysql.sock
</stack:file>

<!--
	centos needs a new service file to set command line args as well as /var/run/mysql
-->

<stack:file stack:name="/etc/systemd/system/mariadb.service"
            stack:owner="root:root" stack:perms="0644"
            stack:cond="os == 'redhat'">
.include /usr/lib/systemd/system/mariadb.service

# note: 'defaults-file' must be the first arg here.
[Service]
RuntimeDirectory=mysql
Environment="MYSQLD_OPTS=--defaults-file=/etc/my.cnf --user=mysql --basedir=/usr"
# weird systemd behavior that requires an empty ExecStart before overwriting ExecStart
ExecStart=
ExecStart=/usr/bin/mysqld_safe $MYSQLD_OPTS
</stack:file>

<!-- we added a systemd file, so reload -->
systemctl daemon-reload

<!--
	sql file to nuke default anonymous user inside mysql,
	set our password on root, nuke some unused tables,
	set the password for the apache user
-->

<stack:file stack:name="/root/initial.sql" stack:perms="0400"
            stack:owner="root:root" stack:vars="expanded">
UPDATE mysql.user SET Password=PASSWORD('$root_pw') WHERE User='root';
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
FLUSH PRIVILEGES;
</stack:file>


wait_for_mysql_up()
{
	# wait 5 sec each loop by default
	WAIT_TIME=${1:-5}
	echo "Waiting for database to come up"
	mysqladmin -s ping > /dev/null
	while [ $? -ne 0 ]; do
		echo -n '.'
		sleep $WAIT_TIME
		mysqladmin -s ping > /dev/null
	done
}

<!--
	Setup the correct directories and their
	permissions for running the database
	we nuke this later because systemD wants to own it
	but need it because the first start of maria is sans systemd
-->

mkdir -p       /var/run/mysql
chgrp -R mysql /var/run/mysql
chmod -R g+rwx /var/run/mysql
chmod a+rx     /var/run/mysql

<!--
	install the basic mysql tables,
	run in mysqld_safe mode to load initial db config `initial.sql`
	then kill the mysqld_safe daemon before starting the service with systemd
	note that this doesn't seem to be necessary on SLES, but it shouldn't hurt
-->
if [[ ! -z $(which mysql_install_db) ]]
then
	mysql_install_db --user=mysql --basedir=/usr
	mysqld_safe --skip-grant-tables &amp;
	MYSQLD_BG_PID=$!

	wait_for_mysql_up

	mysql -sfu root &lt; /root/initial.sql
	rm -f /root/initial.sql

	<!-- kill the mysqld_safe bg proc, and mysqld if it spawned it -->
	kill -9 $MYSQLD_BG_PID
	kill -9 `pidof mysqld`

	<!-- systemd needs to create /var/run/mysql itself now -->
	rm -rf /var/run/mysql
else
	echo "cannot find the mariadb installation command"
fi

<!--
	Find out what MariaDB is called on this OS,
	Then set to startup at boot and start database now for initial config
-->
MARIA_OR_MYSQL=$(systemctl list-unit-files | grep -e mariadb.service -e mysql.service | head -1 | sed -r 's/.service.*//')

systemctl enable $MARIA_OR_MYSQL
systemctl start  $MARIA_OR_MYSQL

<!--
	if the database doesn't come up, then try to manually start it.

	one use case where the above line will not start the database is for a bare-metal
	install. this is because systemd cannot start services in a chrooted environment.
-->

mysqladmin -s ping > /dev/null
if [ $? -ne 0 ]
then
	mkdir -p /var/run/mysql
	chown mysql.mysql /var/run/mysql
	nohup /usr/bin/mysqld_safe --defaults-file=/etc/my.cnf --user=root &amp;
fi

wait_for_mysql_up

<!--
	set the password for the apache user, root user at localhost.
	likewise, we create a localhost account that can be leveraged for list commands
-->

<stack:file stack:name="/root/users.sql" stack:perms="0400"
            stack:owner="root:root" stack:vars="expanded">
CREATE USER ""@"localhost";
CREATE USER "apache"@"localhost" IDENTIFIED BY "$apache_pw";
CREATE USER "apache"@"127.0.0.1" IDENTIFIED BY "$apache_pw";
CREATE USER "apache"@"&hostname;" IDENTIFIED BY "$apache_pw";
CREATE USER "root"@"&hostname;" IDENTIFIED BY "$root_pw";
</stack:file>

mysql --defaults-file=/etc/root.my.cnf -sf &lt; /root/users.sql
rm -f /root/users.sql

</stack:script>
</stack:stack>
