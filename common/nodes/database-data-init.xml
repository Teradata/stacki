<stack:stack>

	<stack:copyright>
	Copyright (c) 2006 - 2019 Teradata
	All rights reserved. Stacki(r) v5.x stacki.com
	https://github.com/Teradata/stacki/blob/master/LICENSE.txt
	</stack:copyright>

	<stack:rocks>
	Copyright (c) 2000 - 2010 The Regents of the University of California
	All rights reserved. Rocks(r) v5.4 www.rocksclusters.org
	https://github.com/Teradata/stacki/blob/master/LICENSE-ROCKS.txt
	</stack:rocks>


<stack:script stack:chroot="false" stack:stage="install-post" stack:cond="os == 'redhat'">
cp /tmp/site.attrs /mnt/sysimage/tmp
chmod 400 /mnt/sysimage/tmp/site.attrs
cp /tmp/rolls.xml /mnt/sysimage/tmp
</stack:script>

<stack:script stack:stage="install-post" stack:shell="/opt/stack/bin/python3">
import json
import os.path

attrs = []
if os.path.exists('/tmp/site.attrs'):
	with open('/tmp/site.attrs', 'r') as file:
		for line in file.readlines():
			try:
				key, value = line.split(':', 1)
			except:
				continue

			key   = key.strip()
			value = value.strip()

			if key in ['hostname', 'rack', 'rank', 'os', 
				   'nukedisks', 'nukecontroller']:
				continue

			if key in ['Kickstart_PrivatePortableRootPassword',
				   'Kickstart_PrivateRootPassword',
				   'Kickstart_PrivateDjangoRootPassword']:
				shadow = True
			else:
				shadow = False

			attrs.append({'name': key,
				      'value': value,
				      'shadow': shadow})

with open('/tmp/site.json', 'w') as file:
	file.write(json.dumps({"attr": attrs}))
</stack:script>

<stack:script stack:stage="install-post">

<stack:file stack:name="/tmp/dump-core.json">
{
        "access": [
                {
                        "command": "*",
                        "group": "apache"
                },
                {
                        "command": "list*",
                        "group": "wheel"
                },
        ],
        "attr": [
                {
                        "name": "sync.ssh.authkey",
                        "value": true
                },
                {
                        "name": "ssh.use_dns",
                        "value": true
                },
                {
                        "name": "os",
                        "value": "&os;"
                },
                {
                        "name": "firewall",
                        "value": true
                }
	],
        "network": [
                {
                        "name":    "private",
                        "address": "&Kickstart_PrivateNetwork;",
                        "mask":    "&Kickstart_PrivateNetmask;",
                        "gateway": "&Kickstart_PrivateGateway;",
			"zone":    "&Kickstart_PrivateDNSDomain;",
                        "dns":     false,
                        "pxe":     true
                }
        ],
        "route": [
                {
                        "address": "224.0.0.0",
                        "netmask": "255.255.255.0",
                        "subnet":  "private"
                },
                {
                        "address": "255.255.255.255",
                        "netmask": "255.255.255.255",
                        "subnet":  "private"
                }
        ],
        "bootaction": [
                {
                        "name":   "default",
                        "type":   "os",
                        "kernel": "com32 chain.c32",
                        "args":   "hd0"
                },
                {
                        "name":    "pxeflash",
                        "type":    "os",
                        "kernel":  "kernel memdisk bigraw",
                        "ramdisk": "pxeflash.img",
                        "args":    "keeppxe"
                },
                {
                        "name":   "localboot",
                        "type":   "os",
                        "kernel": "localboot 0"
                },
                {
                        "name":   "hplocalboot",
                        "type":   "os",
                        "kernel": "localboot -1"
                },
                {
                        "name":   "memtest",
                        "type":   "os",
                        "kernel": "kernel memtest"
                }

        ],
	"software": {
                "box": [ 
			{
				"name": "frontend"
                        },
			{
				"name": "default"
                        }
                ]
	},
        "appliance": [
                {
                        "name": "frontend",
                        "public": false,
                        "attr": [ 
                                { "name": "node",          "value": "server" },
				{ "name": "kickstartable", "value": true },
				{ "name": "managed",       "value": false }
			]
                },
                {
                        "name": "builder",
                        "public": false,
                        "attr": [ 
                                { "name": "node",          "value": "builder" },
				{ "name": "kickstartable", "value": true },
				{ "name": "managed",       "value": true }
			]
                },
                {
                        "name": "barnacle",
                        "public": false,
                        "attr": [ 
                                { "name": "node",          "value": "barnacle" },
				{ "name": "kickstartable", "value": true },
				{ "name": "managed",       "value": true }
			]
                },
                {
                        "name": "switch",
                        "public": false,
                        "attr": [ 
				{ "name": "kickstartable", "value": false },
				{ "name": "managed",       "value": false }
			]
		},
                {
                        "name": "backend",
                        "public": true,
                        "attr": [ 
                                { "name": "node",          "value": "backend" },
				{ "name": "kickstartable", "value": true },
				{ "name": "managed",       "value": true }
			]
                },
                {
                        "name": "replicant",
                        "public": true,
                        "attr": [ 
                                { "name": "node",            "value": "replicant" },
				{ "name": "kickstartable",   "value": true },
				{ "name": "managed",         "value": true },
                                { "name": "const_overwrite", "value": false }
			]
                },
                {
                        "name": "external",
                        "public": false,
                        "attr": [ 
				{ "name": "kickstartable", "value": false },
				{ "name": "managed",       "value": false }
			]
		}
        ]
}
</stack:file>

/opt/stack/bin/stack load /tmp/site.json | sh
/opt/stack/bin/stack load /tmp/dump-core.json | sh

</stack:script>


</stack:stack>
