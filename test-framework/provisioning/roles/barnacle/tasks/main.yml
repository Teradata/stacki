---
  - name: Copy Stacki ISO to frontend
    copy:
      src: "{{ lookup('env','STACKI_ISO') }}"
      dest: /export/isos/
      mode: 0644

  - name: Ensures vagrant dir exists
    file:
      path: /vagrant
      state: directory

  - name: Fetch a random file to use during rndc-confgen
    get_url:
      url: https://raw.githubusercontent.com/Teradata/stacki/develop/logo.png
      dest: /vagrant/randomfile
      mode: 0644
    register: get_url_result
    until: get_url_result is succeeded
    retries: 6
    delay: 10
    when: lookup('env','GIT_BRANCH') is match("(feature|bugfix)/.*")

  - name: Setup /etc/host to a known good state
    copy:
      dest: /etc/hosts
      content: |
        127.0.0.1       localhost
        192.168.0.2     frontend-0-0  frontend-0-0
      mode: 0644

  - name: Setup /etc/resolv.conf to known good state
    copy:
      src: /etc/resolv.conf
      dest: /etc/resolv.conf
      mode: 0644

  - name: Create directory to mount stacki ISO
    file:
      path: /mnt/stacki
      state: directory

  - name: Mount the stacki ISO to access the required RPMs
    command: mount /export/isos/{{ lookup('env','STACKI_ISO')|basename }} /mnt/stacki
    args:
      warn: no

  - name: Find the foundation-python RPM in the stacki ISO
    find:
      paths: /mnt/stacki
      patterns: foundation-python-3*.rpm
      recurse: yes
    register: foundation_python_rpm

  - name: Find the stacki-fab RPM in the stacki ISO
    find:
      paths: /mnt/stacki
      patterns: stacki-fab*.rpm
      recurse: yes
    register: stacki_fab_rpm

  - name: Install foundation-python
    command: "rpm -ivh {{ item.path }}"
    args:
      warn: no
    loop: "{{ foundation_python_rpm.files }}"

  - name: Install stacki-fab
    command: "rpm -ivh {{ item.path }}"
    args:
      warn: no
    loop: "{{ stacki_fab_rpm.files }}"

  - name: Unmount stacki ISO
    command: umount /mnt/stacki
    args:
      warn: no

  - name: Barnacle the frontend
    shell: /opt/stack/bin/frontend-install.py --use-existing --stacki-iso=/export/isos/{{ lookup('env','STACKI_ISO')|basename }} <<< "2"
    register: barnacle_output

  - name: Barnacle Output
    echo:
      output: "{{ barnacle_output.stdout }}"
